openapi: 3.0.3
info:
  title: Edu-Hub API
  version: 1.0.0
  description: API documentation for Users, Courses, Enrollments, and Materials

servers:
  - url: https://8080-bafadcecbaecabadddaabfeeddcacffe.premiumproject.examly.io

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id: { type: string }
        email: { type: string }
        password: { type: string }
        role: { type: string }
    Course:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        description: { type: string }
    Enrollment:
      type: object
      properties:
        _id: { type: string }
        userId: { type: string }
        courseId: { type: string }
        status: { type: string }
    Material:
      type: object
      properties:
        _id: { type: string }
        title: { type: string }
        description: { type: string }
        courseId: { type: string }

security:
  - bearerAuth: []

paths:
  /api/users/addUser:
    post:
      summary: Register a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created

  /api/users/getUserByEmailAndPassword:
    post:
      summary: Authenticate user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200':
          description: Authenticated

  /api/courses/getAllCourses:
    get:
      summary: Get all courses
      tags: [Courses]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of courses

  /api/courses/getCourseById/{id}:
    get:
      summary: Get course by ID
      tags: [Courses]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Course object

  /api/courses/addCourse:
    post:
      summary: Add new course
      tags: [Courses]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '201':
          description: Course created

  /api/courses/updateCourse/{id}:
    put:
      summary: Update course
      tags: [Courses]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: Course updated

  /api/courses/deleteCourse/{id}:
    delete:
      summary: Delete course
      tags: [Courses]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Course deleted

  /api/courses/softDeleteCourse/{id}:
    put:
      summary: Soft delete course
      tags: [Courses]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Course soft deleted

  /api/enrollment/getAllEnrollments:
    get:
      summary: Get all enrollments
      tags: [Enrollments]
      responses:
        '200':
          description: List of enrollments

  /api/enrollment/getEnrollmentById/{id}:
    get:
      summary: Get enrollment by ID
      tags: [Enrollments]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Enrollment object

  /api/enrollment/getEnrollmentsByCourseId/{courseId}:
    get:
      summary: Get enrollments by course ID
      tags: [Enrollments]
      parameters:
        - in: path
          name: courseId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: List of enrollments

  /api/enrollment/getEnrollmentsByUserId/{userId}:
    get:
      summary: Get enrollments by user ID
      tags: [Enrollments]
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: List of enrollments

  /api/enrollment/addEnrollment:
    post:
      summary: Add new enrollment
      tags: [Enrollments]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Enrollment'
      responses:
        '201':
          description: Enrollment created

  /api/enrollment/updateEnrollment/{id}:
    put:
      summary: Update enrollment
      tags: [Enrollments]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Enrollment updated

  /api/enrollment/updateStatus/{id}:
    patch:
      summary: Update enrollment status
      tags: [Enrollments]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Enrollment status updated

  /api/enrollment/deleteEnrollment/{id}:
    delete:
      summary: Delete enrollment
      tags: [Enrollments]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Enrollment deleted

  /api/materials/:
    get:
      summary: Get all materials
      tags: [Materials]
      responses:
        '200':
          description: List of materials

  /api/materials/course:
    get:
      summary: Get materials by course (educator)
      tags: [Materials]
      responses:
        '200':
          description: List of materials

  /api/materials/course/{courseId}:
    get:
      summary: Get materials by course ID
      tags: [Materials]
      parameters:
        - in: path
          name: courseId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: List of materials

  /api/materials/{id}:
    get:
      summary: Get material by ID
      tags: [Materials]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Material object

  /api/materials/add:
    post:
      summary: Add material
      tags: [Materials]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Material'
      responses:
        '201':
          description: Material created

  /api/materials/addFile:
    post:
      summary: Add material file
      tags: [Materials]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Material file added

  /api/materials/update/{id}:
    put:
      summary: Update material
      tags: [Materials]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Material updated

  /api/materials/softDeleteMaterial/{id}:
    put:
      summary: Soft delete material
      tags: [Materials]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Material soft deleted